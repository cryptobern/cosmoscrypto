{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1","program":"/home/sh4d0/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","az","--edition=2018","/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=878c6f881f0e13e3","-C","extra-filename=-878c6f881f0e13e3","--out-dir","/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps","-L","dependency=/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps","--cap-lints","allow","--cfg","track_caller","--error-format=json","--sysroot","/home/sh4d0/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps/libaz-878c6f881f0e13e3.rmeta"},"prelude":{"crate_id":{"name":"az","disambiguator":[10052970839720461520,11401427575863624681]},"crate_root":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src","external_crates":[{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[1111923456158047016,16902919259693091653]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4206559302939301148,6164973543688958239]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5256837966271238037,14624209252821231605]}}],"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":453,"byte_end":27577,"line_start":16,"line_end":962,"column_start":1,"column_end":28}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":453,"byte_end":27577,"line_start":16,"line_end":962,"column_start":1,"column_end":28},"name":"","qualname":"::","value":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":44},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":4119},{"krate":0,"index":4123},{"krate":0,"index":4126},{"krate":0,"index":4128},{"krate":0,"index":4131},{"krate":0,"index":4134},{"krate":0,"index":4136},{"krate":0,"index":4140}],"decl_id":null,"docs":"# Numeric casts","sig":null,"attributes":[{"value":"*\n# Numeric casts\n\nThis crate provides casts and checked casts.\n\n## Quick examples\n\n```rust\nuse az::{Az, OverflowingAs, WrappingAs};\nuse core::num::Wrapping;\n\n// Panics on overflow with `debug_assertions`, otherwise wraps\nassert_eq!(12i32.az::<u32>(), 12u32);\n\n// Always wraps\nlet wrapped = 1u32.wrapping_neg();\nassert_eq!((-1).wrapping_as::<u32>(), wrapped);\nassert_eq!((-1).overflowing_as::<u32>(), (wrapped, true));\n\n// Wrapping can also be obtained using `Wrapping`\nassert_eq!((-1).az::<Wrapping<u32>>().0, wrapped);\n```\n\nConversions from floating-point to integers are also supported.\nNumbers are rounded towards zero, but the [`Round`] wrapper can be\nused to convert floating-point numbers to integers with rounding to\nthe nearest, with ties rounded to even.\n\n```rust\nuse az::{Az, CheckedAs, Round, SaturatingAs};\nuse core::f32;\n\nassert_eq!(15.7.az::<i32>(), 15);\nassert_eq!(Round(15.5).az::<i32>(), 16);\nassert_eq!(1.5e20.saturating_as::<i32>(), i32::max_value());\nassert_eq!(f32::NAN.checked_as::<i32>(), None);\n```\n\n## Implementing casts for other types\n\nTo provide casts for another type, you should implement the [`Cast`]\ntrait and if necessary the [`CheckedCast`], [`SaturatingCast`],\n[`WrappingCast`], [`OverflowingCast`] and [`UnwrappedCast`] traits.\nThe [`Az`], [`CheckedAs`], [`SaturatingAs`], [`WrappingAs`],\n[`OverflowingAs`] and [`UnwrappedAs`] traits are already implemented\nfor all types using blanket implementations that make use of the\nformer traits.\n\nThe cast traits can also be implemented for references. This can be\nuseful for expensive types that are not [`Copy`]. For example if you\nhave your own integer type that does not implement [`Copy`], you could\nimplement casts like in the following example. (The type `I` could be\nan expensive type, for example a bignum integer, but for the example\nit is only a wrapped [`i32`].)\n\n```rust\nuse az::{Az, Cast};\nuse core::borrow::Borrow;\n\nstruct I(i32);\nimpl Cast<i64> for &'_ I {\n    fn cast(self) -> i64 { self.0.cast() }\n}\n\nlet owned = I(12);\nassert_eq!((&owned).az::<i64>(), 12);\n// borrow can be used if chaining is required\nassert_eq!(owned.borrow().az::<i64>(), 12);\n```\n\n## Using the *az* crate\n\nThe *az* crate is available on [crates.io][*az* crate]. To use it in\nyour crate, add it as a dependency inside [*Cargo.toml*]:\n\n```toml\n[dependencies]\naz = \"1.1\"\n```\n\nThe crate requires rustc version 1.31.0 or later.\n\n## License\n\nThis crate is free software: you can redistribute it and/or modify it\nunder the terms of either\n\n  * the [Apache License, Version 2.0][LICENSE-APACHE] or\n  * the [MIT License][LICENSE-MIT]\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache\nLicense, Version 2.0, shall be dual licensed as above, without any\nadditional terms or conditions.\n\n[*Cargo.toml*]: https://doc.rust-lang.org/cargo/guide/dependencies.html\n[*az* crate]: https://crates.io/crates/az\n[LICENSE-APACHE]: https://www.apache.org/licenses/LICENSE-2.0\n[LICENSE-MIT]: https://opensource.org/licenses/MIT\n[`Az`]: trait.Az.html\n[`Cast`]: trait.Cast.html\n[`CheckedAs`]: trait.CheckedAs.html\n[`CheckedCast`]: trait.CheckedCast.html\n[`Copy`]: https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\n[`OverflowingAs`]: trait.OverflowingAs.html\n[`OverflowingCast`]: trait.OverflowingCast.html\n[`Round`]: struct.Round.html\n[`SaturatingAs`]: trait.SaturatingAs.html\n[`SaturatingCast`]: trait.SaturatingCast.html\n[`UnwrappedAs`]: trait.UnwrappedAs.html\n[`UnwrappedCast`]: trait.UnwrappedCast.html\n[`WrappingAs`]: trait.WrappingAs.html\n[`WrappingCast`]: trait.WrappingCast.html\n[`i32`]: https://doc.rust-lang.org/nightly/std/primitive.i32.html\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":453,"byte_end":4188,"line_start":16,"line_end":134,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":4189,"byte_end":4199,"line_start":135,"line_end":135,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":4200,"byte_end":4222,"line_start":136,"line_end":136,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5274,"byte_end":5278,"line_start":178,"line_end":178,"column_start":11,"column_end":15},"name":"Cast","qualname":"::Cast","value":"Cast<Dst>","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":"Used to cast values.","sig":null,"attributes":[{"value":"*\nUsed to cast values.\n\nIt is normally easier to use the [`Az`] trait instead of this trait.\n\n# Panics\n\nWhen debug assertions are enabled, this trait’s method panics if the\nvalue does not fit in the destination. When debug assertions are *not*\nenabled (usual in release mode), the wrapped value can be returned,\nbut it is not considered a breaking change if in the future it panics;\nif wrapping is required use [`WrappingCast`] instead.\n\nThis trait’s method also panics with no debug assertions if the value\ndoes not fit and cannot be wrapped, for example when trying to cast\nfloating-point ∞ into an integer type.\n\n# Examples\n\n```rust\nuse az::Cast;\nlet a: u32 = 5i32.cast();\nassert_eq!(a, 5);\nassert_eq!(Cast::<u8>::cast(17.1f32), 17);\n```\n\n[`Az`]: trait.Az.html\n[`WrappingCast`]: trait.WrappingCast.html\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":4447,"byte_end":5263,"line_start":149,"line_end":177,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5318,"byte_end":5322,"line_start":180,"line_end":180,"column_start":8,"column_end":12},"name":"cast","qualname":"::Cast::cast","value":"pub fn cast(Self) -> Dst","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5290,"byte_end":5310,"line_start":179,"line_end":179,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5965,"byte_end":5976,"line_start":207,"line_end":207,"column_start":11,"column_end":22},"name":"CheckedCast","qualname":"::CheckedCast","value":"CheckedCast<Dst>","parent":null,"children":[{"krate":0,"index":106}],"decl_id":null,"docs":"Used for checked casts.","sig":null,"attributes":[{"value":"*\nUsed for checked casts.\n\nThis trait’s method returns [`None`] if the value does not fit.\n\nIt is normally easier to use the [`CheckedAs`] trait instead of this trait.\n\n# Examples\n\n```rust\nuse az::CheckedCast;\nuse core::f32;\n\nlet a: Option<u32> = 5i32.checked_cast();\nassert_eq!(a, Some(5));\nassert_eq!(CheckedCast::<u32>::checked_cast(-5i32), None);\nassert_eq!(CheckedCast::<u8>::checked_cast(17.1f32), Some(17));\nlet b: Option<u8> = f32::NAN.checked_cast();\nassert_eq!(b, None);\n```\n\n[`CheckedAs`]: trait.CheckedAs.html\n[`None`]: https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5340,"byte_end":5954,"line_start":183,"line_end":206,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6016,"byte_end":6028,"line_start":209,"line_end":209,"column_start":8,"column_end":20},"name":"checked_cast","qualname":"::CheckedCast::checked_cast","value":"pub fn checked_cast(Self) -> Option<Dst>","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":5988,"byte_end":6008,"line_start":208,"line_end":208,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6621,"byte_end":6635,"line_start":234,"line_end":234,"column_start":11,"column_end":25},"name":"SaturatingCast","qualname":"::SaturatingCast","value":"SaturatingCast<Dst>","parent":null,"children":[{"krate":0,"index":109}],"decl_id":null,"docs":"Used to cast into the destination type, saturating if the value does not fit.","sig":null,"attributes":[{"value":"*\nUsed to cast into the destination type, saturating if the value does not fit.\n\nIt is normally easier to use the [`SaturatingAs`] trait instead of this trait.\n\n# Panics\n\nThis trait’s method panics if the value does not fit and saturation\ndoes not make sense, for example when trying to cast floating-point\nNaN into an integer type.\n\n# Examples\n\n```rust\nuse az::SaturatingCast;\nlet a: u32 = (-1).saturating_cast();\nassert_eq!(a, 0);\nassert_eq!(SaturatingCast::<u8>::saturating_cast(17.0 + 256.0), 255);\n```\n\n[`SaturatingAs`]: trait.SaturatingAs.html\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6054,"byte_end":6610,"line_start":212,"line_end":233,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6675,"byte_end":6690,"line_start":236,"line_end":236,"column_start":8,"column_end":23},"name":"saturating_cast","qualname":"::SaturatingCast::saturating_cast","value":"pub fn saturating_cast(Self) -> Dst","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6647,"byte_end":6667,"line_start":235,"line_end":235,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":7199,"byte_end":7211,"line_start":261,"line_end":261,"column_start":11,"column_end":23},"name":"WrappingCast","qualname":"::WrappingCast","value":"WrappingCast<Dst>","parent":null,"children":[{"krate":0,"index":112}],"decl_id":null,"docs":"Wrapping cast.","sig":null,"attributes":[{"value":"*\nWrapping cast.\n\nIt is normally easier to use the [`WrappingAs`] trait instead of this trait.\n\n# Panics\n\nThis trait’s method panics if the value does not fit and cannot be\nwrapped, for example when trying to cast floating-point ∞ into an\ninteger type.\n\n# Examples\n\n```rust\nuse az::WrappingCast;\nlet a: u32 = (-1).wrapping_cast();\nassert_eq!(a, u32::max_value());\nassert_eq!(WrappingCast::<u8>::wrapping_cast(17.0 + 256.0), 17);\n```\n\n[`WrappingAs`]: trait.WrappingAs.html\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":6708,"byte_end":7188,"line_start":239,"line_end":260,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":7251,"byte_end":7264,"line_start":263,"line_end":263,"column_start":8,"column_end":21},"name":"wrapping_cast","qualname":"::WrappingCast::wrapping_cast","value":"pub fn wrapping_cast(Self) -> Dst","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":7223,"byte_end":7243,"line_start":262,"line_end":262,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":113},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8198,"byte_end":8213,"line_start":295,"line_end":295,"column_start":11,"column_end":26},"name":"OverflowingCast","qualname":"::OverflowingCast","value":"OverflowingCast<Dst>","parent":null,"children":[{"krate":0,"index":115}],"decl_id":null,"docs":"Used for overflowing casts.","sig":null,"attributes":[{"value":"*\nUsed for overflowing casts.\n\nThis trait’s method returns a [tuple] of the value and a [`bool`],\nindicating whether an overflow has occurred. On overflow, the wrapped\nvalue is returned.\n\nIt is normally easier to use the [`OverflowingAs`] trait instead of this trait.\n\n# Examples\n\n```rust\nuse az::OverflowingCast;\nlet a: (u8, bool) = 17i32.overflowing_cast();\nassert_eq!(a, (17, false));\nassert_eq!(OverflowingCast::<u32>::overflowing_cast(-1), (u32::max_value(), true));\nassert_eq!(OverflowingCast::<u8>::overflowing_cast(17.0 + 256.0), (17, true));\n```\n\n# Panics\n\nThis trait’s method panics if the value does not fit and cannot be\nwrapped, for example when trying to cast floating-point ∞ into an\ninteger type.\n\n[`OverflowingAs`]: trait.OverflowingAs.html\n[`bool`]: https://doc.rust-lang.org/nightly/std/primitive.bool.html\n[tuple]: https://doc.rust-lang.org/nightly/std/primitive.tuple.html\n */","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":7282,"byte_end":8187,"line_start":266,"line_end":294,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8253,"byte_end":8269,"line_start":297,"line_end":297,"column_start":8,"column_end":24},"name":"overflowing_cast","qualname":"::OverflowingCast::overflowing_cast","value":"pub fn overflowing_cast(Self) -> (Dst, bool)","parent":{"krate":0,"index":113},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8225,"byte_end":8245,"line_start":296,"line_end":296,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":116},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8882,"byte_end":8895,"line_start":326,"line_end":326,"column_start":11,"column_end":24},"name":"UnwrappedCast","qualname":"::UnwrappedCast","value":"UnwrappedCast<Dst>","parent":null,"children":[{"krate":0,"index":118}],"decl_id":null,"docs":"Used to cast values, panicking if the value does not fit.","sig":null,"attributes":[{"value":"*\nUsed to cast values, panicking if the value does not fit.\n\nIt is normally easier to use the [`UnwrappedAs`] trait instead of this trait.\n\n# Panics\n\nThis trait’s method panics if the value does not fit in the\ndestination, even when debug assertions are not enabled.\n\n# Examples\n\n```rust\nuse az::UnwrappedCast;\nlet a: u32 = 5i32.unwrapped_cast();\nassert_eq!(a, 5);\nassert_eq!(UnwrappedCast::<u8>::unwrapped_cast(17.1f32), 17);\n```\n\nThe following panics because of overflow.\n\n```rust,should_panic\nuse az::UnwrappedCast;\nlet _overflow: u32 = (-5i32).unwrapped_cast();\n```\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8295,"byte_end":8871,"line_start":300,"line_end":325,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8979,"byte_end":8993,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"unwrapped_cast","qualname":"::UnwrappedCast::unwrapped_cast","value":"pub fn unwrapped_cast(Self) -> Dst","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8907,"byte_end":8927,"line_start":327,"line_end":327,"column_start":5,"column_end":25}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":8957,"byte_end":8969,"line_start":328,"line_end":328,"column_start":30,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":119},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":10947,"byte_end":10949,"line_start":394,"line_end":394,"column_start":11,"column_end":13},"name":"Az","qualname":"::Az","value":"Az","parent":null,"children":[{"krate":0,"index":120}],"decl_id":null,"docs":"Used to cast values.","sig":null,"attributes":[{"value":"*\nUsed to cast values.\n\nThis is a convenience trait to enable writing\n<code>src.[az][`az`]::&lt;Dst&gt;()</code>. This would not work with\nthe <code>[Cast][`Cast`]::[cast][`Cast::cast`]</code> method because\nthe [`Cast`] trait is generic while its [`cast`][`Cast::cast`] method\nis not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[Cast][`Cast`]&lt;Dst&gt;</code> for `&Src` but not for `Src`,\nand the variable `src` is of type `Src`, then\n<code>src.[az][`az`]::&lt;Dst&gt;()</code> would not work and\n<code>(&src).[az][`az`]::&lt;Dst&gt;()</code> is not easy to use with\nchaining, but\n<code>src.[borrow][`borrow`]().[az][`az`]::&lt;Dst&gt;()</code> works.\n\n# Panics\n\nWhen debug assertions are enabled, this trait’s method panics if the\nvalue does not fit in the destination. When debug assertions are *not*\nenabled (usual in release mode), the wrapped value can be returned,\nbut it is not considered a breaking change if in the future it panics;\nif wrapping is required use [`WrappingAs`] instead.\n\nThis trait’s method also panics with no debug assertions if the value\ndoes not fit and cannot be wrapped, for example when trying to cast\nfloating-point ∞ into an integer type.\n\n# Examples\n\n```rust\nuse az::Az;\nassert_eq!(5i32.az::<u32>(), 5);\nassert_eq!(17.1f32.az::<u8>(), 17);\n```\n\nThe following example shows how this trait can be used when [`Cast`]\nis implemented for a reference type.\n\n```rust\nuse az::{Az, Cast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl Cast<i64> for &'_ I {\n    fn cast(self) -> i64 { self.0.cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.az::<i64>(), -5);\nlet owned = I(12);\nassert_eq!(owned.borrow().az::<i64>(), 12);\n```\n\n[`Cast`]: trait.Cast.html\n[`WrappingAs`]: trait.WrappingAs.html\n[`az`]: #tymethod.az\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`Cast::cast`]: trait.Cast.html#tymethod.cast\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":9011,"byte_end":10936,"line_start":332,"line_end":393,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":10984,"byte_end":10986,"line_start":396,"line_end":396,"column_start":8,"column_end":10},"name":"az","qualname":"::Az::az","value":"pub fn az<Dst>(Self) -> Dst where Self: Cast<Dst>","parent":{"krate":0,"index":119},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":10956,"byte_end":10976,"line_start":395,"line_end":395,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13122,"byte_end":13131,"line_start":471,"line_end":471,"column_start":11,"column_end":20},"name":"CheckedAs","qualname":"::CheckedAs","value":"CheckedAs","parent":null,"children":[{"krate":0,"index":127}],"decl_id":null,"docs":"Used for checked casts.","sig":null,"attributes":[{"value":"*\nUsed for checked casts.\n\nThis trait’s method returns [`None`] if the value does not fit.\n\nThis is a convenience trait to enable writing\n<code>src.[checked\\_as][`checked_as`]::&lt;Dst&gt;()</code>. This\nwould not work with the\n<code>[CheckedCast][`CheckedCast`]::[checked\\_cast][`checked_cast`]</code>\nmethod because the [`CheckedCast`] trait is generic while its\n[`checked_cast`] method is not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[CheckedCast][`CheckedCast`]&lt;Dst&gt;</code> for `&Src` but\nnot for `Src`, and the variable `src` is of type `Src`, then\n<code>src.[checked\\_as][`checked_as`]::&lt;Dst&gt;()</code> would not\nwork and\n<code>(&src).[checked\\_as][`checked_as`]::&lt;Dst&gt;()</code> is not\neasy to use with chaining, but\n<code>src.[borrow][`borrow`]().[checked\\_as][`checked_as`]::&lt;Dst&gt;()</code>\nworks.\n\n# Examples\n\n```rust\nuse az::CheckedAs;\nuse core::f32;\n\nassert_eq!(5i32.checked_as::<u32>(), Some(5));\nassert_eq!((-5i32).checked_as::<u32>(), None);\nassert_eq!(17.1f32.checked_as::<u8>(), Some(17));\nassert_eq!(f32::NAN.checked_as::<u8>(), None);\n```\n\nThe following example shows how this trait can be used when\n[`CheckedCast`] is implemented for a reference type.\n\n```rust\nuse az::{CheckedAs, CheckedCast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl CheckedCast<u32> for &'_ I {\n    fn checked_cast(self) -> Option<u32> { self.0.checked_cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.checked_as::<u32>(), None);\nlet owned = I(12);\nassert_eq!(owned.borrow().checked_as::<u32>(), Some(12));\n```\n\n[`CheckedCast`]: trait.CheckedCast.html\n[`None`]: https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`checked_as`]: #tymethod.checked_as\n[`checked_cast`]: trait.CheckedCast.html#tymethod.checked_cast\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":11218,"byte_end":13111,"line_start":412,"line_end":470,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13166,"byte_end":13176,"line_start":473,"line_end":473,"column_start":8,"column_end":18},"name":"checked_as","qualname":"::CheckedAs::checked_as","value":"pub fn checked_as<Dst>(Self) -> Option<Dst> where Self: CheckedCast<Dst>","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13138,"byte_end":13158,"line_start":472,"line_end":472,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15412,"byte_end":15424,"line_start":547,"line_end":547,"column_start":11,"column_end":23},"name":"SaturatingAs","qualname":"::SaturatingAs","value":"SaturatingAs","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":"Used to cast into the destination type, saturating if the value does not fit.","sig":null,"attributes":[{"value":"*\nUsed to cast into the destination type, saturating if the value does not fit.\n\nThis is a convenience trait to enable writing\n<code>src.[saturating\\_as][`saturating_as`]::&lt;Dst&gt;()</code>.\nThis would not work with the\n<code>[SaturatingCast][`SaturatingCast`]::[saturating\\_cast][`saturating_cast`]</code>\nmethod because the [`SaturatingCast`] trait is generic while its\n[`saturating_cast`] method is not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[SaturatingCast][`SaturatingCast`]&lt;Dst&gt;</code> for `&Src`\nbut not for `Src`, and the variable `src` is of type `Src`, then\n<code>src.[saturating\\_as][`saturating_as`]::&lt;Dst&gt;()</code>\nwould not work and\n<code>(&src).[saturating\\_as][`saturating_as`]::&lt;Dst&gt;()</code>\nis not easy to use with chaining, but\n<code>src.[borrow][`borrow`]().[saturating\\_as][`saturating_as`]::&lt;Dst&gt;()</code>\nworks.\n\n# Panics\n\nThis trait’s method panics if the value does not fit and saturation\ndoes not make sense, for example when trying to cast floating-point\nNaN into an integer type.\n\n# Examples\n\n```rust\nuse az::SaturatingAs;\nassert_eq!((-1).saturating_as::<u32>(), 0);\nassert_eq!((17.0 + 256.0).saturating_as::<u8>(), 255);\n```\n\nThe following example shows how this trait can be used when\n[`SaturatingCast`] is implemented for a reference type.\n\n```rust\nuse az::{SaturatingAs, SaturatingCast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl SaturatingCast<u32> for &'_ I {\n    fn saturating_cast(self) -> u32 { self.0.saturating_cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.saturating_as::<u32>(), 0);\nlet owned = I(12);\nassert_eq!(owned.borrow().saturating_as::<u32>(), 12);\n```\n\n[`SaturatingCast`]: trait.SaturatingCast.html\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`saturating_as`]: #tymethod.saturating_as\n[`saturating_cast`]: trait.SaturatingCast.html#tymethod.saturating_cast\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13461,"byte_end":15401,"line_start":489,"line_end":546,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15459,"byte_end":15472,"line_start":549,"line_end":549,"column_start":8,"column_end":21},"name":"saturating_as","qualname":"::SaturatingAs::saturating_as","value":"pub fn saturating_as<Dst>(Self) -> Dst where Self: SaturatingCast<Dst>","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15431,"byte_end":15451,"line_start":548,"line_end":548,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17595,"byte_end":17605,"line_start":623,"line_end":623,"column_start":11,"column_end":21},"name":"WrappingAs","qualname":"::WrappingAs","value":"WrappingAs","parent":null,"children":[{"krate":0,"index":141}],"decl_id":null,"docs":"Wrapping cast.","sig":null,"attributes":[{"value":"*\nWrapping cast.\n\nThis is a convenience trait to enable writing\n<code>src.[wrapping\\_as][`wrapping_as`]::&lt;Dst&gt;()</code>. This\nwould not work with the\n<code>[WrappingCast][`WrappingCast`]::[wrapping\\_cast][`wrapping_cast`]</code>\nmethod because the [`WrappingCast`] trait is generic while its\n[`wrapping_cast`] method is not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[WrappingCast][`WrappingCast`]&lt;Dst&gt;</code> for `&Src` but\nnot for `Src`, and the variable `src` is of type `Src`, then\n<code>src.[wrapping\\_as][`wrapping_as`]::&lt;Dst&gt;()</code> would\nnot work and\n<code>(&src).[wrapping\\_as][`wrapping_as`]::&lt;Dst&gt;()</code> is\nnot easy to use with chaining, but\n<code>src.[borrow][`borrow`]().[wrapping\\_as][`wrapping_as`]::&lt;Dst&gt;()</code>\nworks.\n\n# Panics\n\nThis trait’s method panics if the value does not fit and cannot be\nwrapped, for example when trying to cast floating-point ∞ into an\ninteger type.\n\n# Examples\n\n```rust\nuse az::WrappingAs;\nassert_eq!((-1).wrapping_as::<u32>(), u32::max_value());\nassert_eq!((17.0 + 256.0).wrapping_as::<u8>(), 17);\n```\n\nThe following example shows how this trait can be used when\n[`WrappingCast`] is implemented for a reference type.\n\n```rust\nuse az::{WrappingAs, WrappingCast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl WrappingCast<u32> for &'_ I {\n    fn wrapping_cast(self) -> u32 { self.0.wrapping_cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.wrapping_as::<u32>(), 5u32.wrapping_neg());\nlet owned = I(12);\nassert_eq!(owned.borrow().wrapping_as::<u32>(), 12);\n```\n\n[`WrappingCast`]: trait.WrappingCast.html\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`wrapping_as`]: #tymethod.wrapping_as\n[`wrapping_cast`]: trait.WrappingCast.html#tymethod.wrapping_cast\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15756,"byte_end":17584,"line_start":565,"line_end":622,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17640,"byte_end":17651,"line_start":625,"line_end":625,"column_start":8,"column_end":19},"name":"wrapping_as","qualname":"::WrappingAs::wrapping_as","value":"pub fn wrapping_as<Dst>(Self) -> Dst where Self: WrappingCast<Dst>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17612,"byte_end":17632,"line_start":624,"line_end":624,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20270,"byte_end":20283,"line_start":707,"line_end":707,"column_start":11,"column_end":24},"name":"OverflowingAs","qualname":"::OverflowingAs","value":"OverflowingAs","parent":null,"children":[{"krate":0,"index":148}],"decl_id":null,"docs":"Used for overflowing casts.","sig":null,"attributes":[{"value":"*\nUsed for overflowing casts.\n\nThis trait’s method returns a [tuple] of the value and a [`bool`],\nindicating whether an overflow has occurred. On overflow, the wrapped\nvalue is returned.\n\nThis is a convenience trait to enable writing\n<code>src.[overflowing\\_as][`overflowing_as`]::&lt;Dst&gt;()</code>.\nThis would not work with the\n<code>[OverflowingCast][`OverflowingCast`]::[overflowing\\_cast][`overflowing_cast`]</code>\nmethod because the [`OverflowingCast`] trait is generic while its\n[`overflowing_cast`] method is not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[OverflowingCast][`OverflowingCast`]&lt;Dst&gt;</code> for\n`&Src` but not for `Src`, and the variable `src` is of type `Src`,\nthen\n<code>src.[overflowing\\_as][`overflowing_as`]::&lt;Dst&gt;()</code>\nwould not work and\n<code>(&src).[overflowing\\_as][`overflowing_as`]::&lt;Dst&gt;()</code>\nis not easy to use with chaining, but\n<code>src.[borrow][`borrow`]().[overflowing\\_as][`overflowing_as`]::&lt;Dst&gt;()</code>\nworks.\n\n# Panics\n\nThis trait’s method panics if the value does not fit and cannot be\nwrapped, for example when trying to cast floating-point ∞ into an\ninteger type.\n\n# Examples\n\n```rust\nuse az::OverflowingAs;\nassert_eq!(17i32.overflowing_as::<u8>(), (17, false));\nassert_eq!((-1).overflowing_as::<u32>(), (u32::max_value(), true));\nassert_eq!((17.0 + 256.0).overflowing_as::<u8>(), (17, true));\n```\n\nThe following example shows how this trait can be used when\n[`OverflowingCast`] is implemented for a reference type.\n\n```rust\nuse az::{OverflowingAs, OverflowingCast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl OverflowingCast<u32> for &'_ I {\n    fn overflowing_cast(self) -> (u32, bool) { self.0.overflowing_cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.overflowing_as::<u32>(), (5u32.wrapping_neg(), true));\nlet owned = I(12);\nassert_eq!(owned.borrow().overflowing_as::<u32>(), (12, false));\n```\n\n[`OverflowingCast`]: trait.OverflowingCast.html\n[`bool`]: https://doc.rust-lang.org/nightly/std/primitive.bool.html\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`overflowing_as`]: #tymethod.overflowing_as\n[`overflowing_cast`]: trait.OverflowingCast.html#tymethod.overflowing_cast\n[tuple]: https://doc.rust-lang.org/nightly/std/primitive.tuple.html\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17925,"byte_end":20259,"line_start":641,"line_end":706,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20318,"byte_end":20332,"line_start":709,"line_end":709,"column_start":8,"column_end":22},"name":"overflowing_as","qualname":"::OverflowingAs::overflowing_as","value":"pub fn overflowing_as<Dst>(Self) -> (Dst, bool) where\nSelf: OverflowingCast<Dst>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20290,"byte_end":20310,"line_start":708,"line_end":708,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":154},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22619,"byte_end":22630,"line_start":789,"line_end":789,"column_start":11,"column_end":22},"name":"UnwrappedAs","qualname":"::UnwrappedAs","value":"UnwrappedAs","parent":null,"children":[{"krate":0,"index":155}],"decl_id":null,"docs":"Used to cast values, panicking if the value does not fit.","sig":null,"attributes":[{"value":"*\nUsed to cast values, panicking if the value does not fit.\n\nThis is a convenience trait to enable writing\n<code>src.[unwrapped\\_as][`unwrapped_as`]::&lt;Dst&gt;()</code>. This\nwould not work with the\n<code>[UnwrappedCast][`UnwrappedCast`]::[unwrapped\\_cast][`unwrapped_cast`]</code>\nmethod because the [`UnwrappedCast`] trait is generic while its\n[`unwrapped_cast`] method is not generic.\n\nThis trait’s method is suitable for chaining.\n\nIf there is an implementation of\n<code>[UnwrappedCast][`UnwrappedCast`]&lt;Dst&gt;</code> for `&Src`\nbut not for `Src`, and the variable `src` is of type `Src`, then\n<code>src.[unwrapped\\_as][`unwrapped_as`]::&lt;Dst&gt;()</code> would\nnot work and\n<code>(&src).[unwrapped\\_as][`unwrapped_as`]::&lt;Dst&gt;()</code> is\nnot easy to use with chaining, but\n<code>src.[borrow][`borrow`]().[unwrapped\\_as][`unwrapped_as`]::&lt;Dst&gt;()</code>\nworks.\n\n# Panics\n\nThis trait’s method panics if the value does not fit in the\ndestination, even when debug assertions are not enabled.\n\n# Examples\n\n```rust\nuse az::UnwrappedAs;\nassert_eq!(5i32.unwrapped_as::<u32>(), 5);\nassert_eq!(17.1f32.unwrapped_as::<u8>(), 17);\n```\n\nThe following panics because of overflow.\n\n```rust,should_panic\nuse az::UnwrappedAs;\nlet _overflow = (-5i32).unwrapped_as::<u32>();\n```\n\nThe following example shows how this trait can be used when\n[`UnwrappedCast`] is implemented for a reference type.\n\n```rust\nuse az::{UnwrappedAs, UnwrappedCast};\nuse core::borrow::Borrow;\nstruct I(i32);\nimpl UnwrappedCast<i64> for &'_ I {\n    fn unwrapped_cast(self) -> i64 { self.0.unwrapped_cast() }\n}\n\nlet r = &I(-5);\nassert_eq!(r.unwrapped_as::<i64>(), -5);\nlet owned = I(12);\nassert_eq!(owned.borrow().unwrapped_as::<i64>(), 12);\n```\n\n[`UnwrappedCast`]: trait.UnwrappedCast.html\n[`borrow`]: https://doc.rust-lang.org/core/borrow/trait.Borrow.html#tymethod.borrow\n[`unwrapped_as`]: #tymethod.unwrapped_as\n[`unwrapped_cast`]: trait.UnwrappedCast.html#tymethod.unwrapped_cast\n*/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20637,"byte_end":22608,"line_start":725,"line_end":788,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22709,"byte_end":22721,"line_start":792,"line_end":792,"column_start":8,"column_end":20},"name":"unwrapped_as","qualname":"::UnwrappedAs::unwrapped_as","value":"pub fn unwrapped_as<Dst>(Self) -> Dst where Self: UnwrappedCast<Dst>","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Casts the value.\n","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22637,"byte_end":22657,"line_start":790,"line_end":790,"column_start":5,"column_end":25}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22687,"byte_end":22699,"line_start":791,"line_end":791,"column_start":30,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23761,"byte_end":23765,"line_start":831,"line_end":831,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<Src: Cast<Dst>, Dst>(Src) -> Dst","parent":null,"children":[],"decl_id":null,"docs":" Casts the value.","sig":null,"attributes":[{"value":"/ Casts the value.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22956,"byte_end":22976,"line_start":807,"line_end":807,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22977,"byte_end":22980,"line_start":808,"line_end":808,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22981,"byte_end":22993,"line_start":809,"line_end":809,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22994,"byte_end":22997,"line_start":810,"line_end":810,"column_start":1,"column_end":4}},{"value":"/ When debug assertions are enabled, panics if the value does not","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22998,"byte_end":23065,"line_start":811,"line_end":811,"column_start":1,"column_end":68}},{"value":"/ fit in the destination. When debug assertions are *not* enabled","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23066,"byte_end":23133,"line_start":812,"line_end":812,"column_start":1,"column_end":68}},{"value":"/ (usual in release mode), the wrapped value can be returned, but it","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23134,"byte_end":23204,"line_start":813,"line_end":813,"column_start":1,"column_end":71}},{"value":"/ is not considered a breaking change if in the future it panics; if","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23205,"byte_end":23275,"line_start":814,"line_end":814,"column_start":1,"column_end":71}},{"value":"/ wrapping is required use [`wrapping_cast`] instead.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23276,"byte_end":23331,"line_start":815,"line_end":815,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23332,"byte_end":23335,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ This function also panics with no debug assertions if the value","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23336,"byte_end":23403,"line_start":817,"line_end":817,"column_start":1,"column_end":68}},{"value":"/ does not fit and cannot be wrapped, for example when trying to","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23404,"byte_end":23470,"line_start":818,"line_end":818,"column_start":1,"column_end":67}},{"value":"/ cast floating-point ∞ into an integer type.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23471,"byte_end":23520,"line_start":819,"line_end":819,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23521,"byte_end":23524,"line_start":820,"line_end":820,"column_start":1,"column_end":4}},{"value":"/ [`wrapping_cast`]: fn.wrapping_cast.html","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23525,"byte_end":23569,"line_start":821,"line_end":821,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23570,"byte_end":23573,"line_start":822,"line_end":822,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23574,"byte_end":23588,"line_start":823,"line_end":823,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23589,"byte_end":23592,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23593,"byte_end":23604,"line_start":825,"line_end":825,"column_start":1,"column_end":12}},{"value":"/ assert_eq!(az::cast::<i32, u32>(5), 5);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23605,"byte_end":23648,"line_start":826,"line_end":826,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(az::cast::<f32, u8>(17.1), 17);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23649,"byte_end":23695,"line_start":827,"line_end":827,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23696,"byte_end":23703,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23704,"byte_end":23713,"line_start":829,"line_end":829,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23739,"byte_end":23751,"line_start":830,"line_end":830,"column_start":26,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24344,"byte_end":24356,"line_start":851,"line_end":851,"column_start":8,"column_end":20},"name":"checked_cast","qualname":"::checked_cast","value":"pub fn checked_cast<Src: CheckedCast<Dst>, Dst>(Src) -> Option<Dst>","parent":null,"children":[],"decl_id":null,"docs":" Casts the value, returning [`None`] if the value does not fit.","sig":null,"attributes":[{"value":"/ Casts the value, returning [`None`] if the value does not fit.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23824,"byte_end":23890,"line_start":835,"line_end":835,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23891,"byte_end":23894,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ [`None`]: https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23895,"byte_end":23984,"line_start":837,"line_end":837,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23985,"byte_end":23988,"line_start":838,"line_end":838,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":23989,"byte_end":24003,"line_start":839,"line_end":839,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24004,"byte_end":24007,"line_start":840,"line_end":840,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24008,"byte_end":24019,"line_start":841,"line_end":841,"column_start":1,"column_end":12}},{"value":"/ use core::f32;","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24020,"byte_end":24038,"line_start":842,"line_end":842,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24039,"byte_end":24042,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(az::checked_cast::<i32, u32>(5), Some(5));","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24043,"byte_end":24100,"line_start":844,"line_end":844,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(az::checked_cast::<i32, u32>(-5), None);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24101,"byte_end":24156,"line_start":845,"line_end":845,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(az::checked_cast::<f32, u8>(17.1), Some(17));","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24157,"byte_end":24217,"line_start":846,"line_end":846,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(az::checked_cast::<f32, u8>(f32::NAN), None);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24218,"byte_end":24278,"line_start":847,"line_end":847,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24279,"byte_end":24286,"line_start":848,"line_end":848,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24287,"byte_end":24296,"line_start":849,"line_end":849,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24322,"byte_end":24334,"line_start":850,"line_end":850,"column_start":26,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24895,"byte_end":24910,"line_start":871,"line_end":871,"column_start":8,"column_end":23},"name":"saturating_cast","qualname":"::saturating_cast","value":"pub fn saturating_cast<Src: SaturatingCast<Dst>, Dst>(Src) -> Dst","parent":null,"children":[],"decl_id":null,"docs":" Casts the value, saturating if the value does not fit.","sig":null,"attributes":[{"value":"/ Casts the value, saturating if the value does not fit.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24438,"byte_end":24496,"line_start":855,"line_end":855,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24497,"byte_end":24500,"line_start":856,"line_end":856,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24501,"byte_end":24513,"line_start":857,"line_end":857,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24514,"byte_end":24517,"line_start":858,"line_end":858,"column_start":1,"column_end":4}},{"value":"/ Panics if the value does not fit and saturation does not make","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24518,"byte_end":24583,"line_start":859,"line_end":859,"column_start":1,"column_end":66}},{"value":"/ sense, for example when trying to cast floating-point NaN into an","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24584,"byte_end":24653,"line_start":860,"line_end":860,"column_start":1,"column_end":70}},{"value":"/ integer type.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24654,"byte_end":24671,"line_start":861,"line_end":861,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24672,"byte_end":24675,"line_start":862,"line_end":862,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24676,"byte_end":24690,"line_start":863,"line_end":863,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24691,"byte_end":24694,"line_start":864,"line_end":864,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24695,"byte_end":24706,"line_start":865,"line_end":865,"column_start":1,"column_end":12}},{"value":"/ assert_eq!(az::saturating_cast::<i32, u32>(-1), 0);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24707,"byte_end":24762,"line_start":866,"line_end":866,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(az::saturating_cast::<f32, u8>(17.0 + 256.0), 255);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24763,"byte_end":24829,"line_start":867,"line_end":867,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24830,"byte_end":24837,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24838,"byte_end":24847,"line_start":869,"line_end":869,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24873,"byte_end":24885,"line_start":870,"line_end":870,"column_start":26,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25424,"byte_end":25437,"line_start":890,"line_end":890,"column_start":8,"column_end":21},"name":"wrapping_cast","qualname":"::wrapping_cast","value":"pub fn wrapping_cast<Src: WrappingCast<Dst>, Dst>(Src) -> Dst","parent":null,"children":[],"decl_id":null,"docs":" Casts the value, wrapping on overflow.","sig":null,"attributes":[{"value":"/ Casts the value, wrapping on overflow.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":24990,"byte_end":25032,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25033,"byte_end":25036,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25037,"byte_end":25049,"line_start":877,"line_end":877,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25050,"byte_end":25053,"line_start":878,"line_end":878,"column_start":1,"column_end":4}},{"value":"/ Panics if the value does not fit and cannot be wrapped, for","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25054,"byte_end":25117,"line_start":879,"line_end":879,"column_start":1,"column_end":64}},{"value":"/ example when trying to cast floating-point ∞ into an integer type.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25118,"byte_end":25190,"line_start":880,"line_end":880,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25191,"byte_end":25194,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25195,"byte_end":25209,"line_start":882,"line_end":882,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25210,"byte_end":25213,"line_start":883,"line_end":883,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25214,"byte_end":25225,"line_start":884,"line_end":884,"column_start":1,"column_end":12}},{"value":"/ assert_eq!(az::wrapping_cast::<i32, u32>(-1), u32::max_value());","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25226,"byte_end":25294,"line_start":885,"line_end":885,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(az::wrapping_cast::<f32, u8>(17.0 + 256.0), 17);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25295,"byte_end":25358,"line_start":886,"line_end":886,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25359,"byte_end":25366,"line_start":887,"line_end":887,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25367,"byte_end":25376,"line_start":888,"line_end":888,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25402,"byte_end":25414,"line_start":889,"line_end":889,"column_start":26,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":173},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26248,"byte_end":26264,"line_start":916,"line_end":916,"column_start":8,"column_end":24},"name":"overflowing_cast","qualname":"::overflowing_cast","value":"pub fn overflowing_cast<Src: OverflowingCast<Dst>, Dst>(Src) -> (Dst, bool)","parent":null,"children":[],"decl_id":null,"docs":" Overflowing cast.","sig":null,"attributes":[{"value":"/ Overflowing cast.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25513,"byte_end":25534,"line_start":894,"line_end":894,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25535,"byte_end":25538,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ Returns a [tuple] of the value and a [`bool`], indicating whether","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25539,"byte_end":25608,"line_start":896,"line_end":896,"column_start":1,"column_end":70}},{"value":"/ an overflow has occurred. On overflow, the wrapped value is","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25609,"byte_end":25672,"line_start":897,"line_end":897,"column_start":1,"column_end":64}},{"value":"/ returned.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25673,"byte_end":25686,"line_start":898,"line_end":898,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25687,"byte_end":25690,"line_start":899,"line_end":899,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25691,"byte_end":25703,"line_start":900,"line_end":900,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25704,"byte_end":25707,"line_start":901,"line_end":901,"column_start":1,"column_end":4}},{"value":"/ Panics if the value does not fit and cannot be wrapped, for","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25708,"byte_end":25771,"line_start":902,"line_end":902,"column_start":1,"column_end":64}},{"value":"/ example when trying to cast floating-point ∞ into an integer type.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25772,"byte_end":25844,"line_start":903,"line_end":903,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25845,"byte_end":25848,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25849,"byte_end":25863,"line_start":905,"line_end":905,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25864,"byte_end":25867,"line_start":906,"line_end":906,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25868,"byte_end":25879,"line_start":907,"line_end":907,"column_start":1,"column_end":12}},{"value":"/ assert_eq!(az::overflowing_cast::<i32, u32>(-1), (u32::max_value(), true));","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25880,"byte_end":25959,"line_start":908,"line_end":908,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(az::overflowing_cast::<f32, u8>(17.0 + 256.0), (17, true));","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":25960,"byte_end":26034,"line_start":909,"line_end":909,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26035,"byte_end":26042,"line_start":910,"line_end":910,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26043,"byte_end":26046,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ [`bool`]: https://doc.rust-lang.org/nightly/std/primitive.bool.html","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26047,"byte_end":26118,"line_start":912,"line_end":912,"column_start":1,"column_end":72}},{"value":"/ [tuple]: https://doc.rust-lang.org/nightly/std/primitive.tuple.html","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26119,"byte_end":26190,"line_start":913,"line_end":913,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26191,"byte_end":26200,"line_start":914,"line_end":914,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26226,"byte_end":26238,"line_start":915,"line_end":915,"column_start":26,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26892,"byte_end":26906,"line_start":941,"line_end":941,"column_start":8,"column_end":22},"name":"unwrapped_cast","qualname":"::unwrapped_cast","value":"pub fn unwrapped_cast<Src: UnwrappedCast<Dst>, Dst>(Src) -> Dst","parent":null,"children":[],"decl_id":null,"docs":" Casts the value, panicking if the value does not fit.","sig":null,"attributes":[{"value":"/ Casts the value, panicking if the value does not fit.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26354,"byte_end":26411,"line_start":920,"line_end":920,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26412,"byte_end":26415,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26416,"byte_end":26428,"line_start":922,"line_end":922,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26429,"byte_end":26432,"line_start":923,"line_end":923,"column_start":1,"column_end":4}},{"value":"/ Panics if the value does not fit in the destination, even when","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26433,"byte_end":26499,"line_start":924,"line_end":924,"column_start":1,"column_end":67}},{"value":"/ debug assertions are not enabled.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26500,"byte_end":26537,"line_start":925,"line_end":925,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26538,"byte_end":26541,"line_start":926,"line_end":926,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26542,"byte_end":26556,"line_start":927,"line_end":927,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26557,"byte_end":26560,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26561,"byte_end":26572,"line_start":929,"line_end":929,"column_start":1,"column_end":12}},{"value":"/ assert_eq!(az::unwrapped_cast::<i32, u32>(5), 5);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26573,"byte_end":26626,"line_start":930,"line_end":930,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(az::unwrapped_cast::<f32, u8>(17.1), 17);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26627,"byte_end":26683,"line_start":931,"line_end":931,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26684,"byte_end":26691,"line_start":932,"line_end":932,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26692,"byte_end":26695,"line_start":933,"line_end":933,"column_start":1,"column_end":4}},{"value":"/ The following panics because of overflow.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26696,"byte_end":26741,"line_start":934,"line_end":934,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26742,"byte_end":26745,"line_start":935,"line_end":935,"column_start":1,"column_end":4}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26746,"byte_end":26770,"line_start":936,"line_end":936,"column_start":1,"column_end":25}},{"value":"/ let _overflow = az::unwrapped_cast::<i32, u32>(-5);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26771,"byte_end":26826,"line_start":937,"line_end":937,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26827,"byte_end":26834,"line_start":938,"line_end":938,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26835,"byte_end":26844,"line_start":939,"line_end":939,"column_start":1,"column_end":10}},{"value":"track_caller","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26870,"byte_end":26882,"line_start":940,"line_end":940,"column_start":26,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4119},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27561,"byte_end":27566,"line_start":962,"line_end":962,"column_start":12,"column_end":17},"name":"Round","qualname":"::Round","value":"","parent":null,"children":[],"decl_id":null,"docs":" Used to convert floating-point numbers to integers with rounding\n to the nearest, with ties rounded to even.","sig":null,"attributes":[{"value":"/ Used to convert floating-point numbers to integers with rounding","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":26984,"byte_end":27052,"line_start":945,"line_end":945,"column_start":1,"column_end":69}},{"value":"/ to the nearest, with ties rounded to even.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27053,"byte_end":27099,"line_start":946,"line_end":946,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27100,"byte_end":27103,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ The underlying value can be retrieved through the `.0` index.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27104,"byte_end":27169,"line_start":948,"line_end":948,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27170,"byte_end":27173,"line_start":949,"line_end":949,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27174,"byte_end":27188,"line_start":950,"line_end":950,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27189,"byte_end":27192,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27193,"byte_end":27204,"line_start":952,"line_end":952,"column_start":1,"column_end":12}},{"value":"/ use az::Round;","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27205,"byte_end":27223,"line_start":953,"line_end":953,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(az::cast::<_, i32>(Round(0.4)), 0);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27224,"byte_end":27274,"line_start":954,"line_end":954,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(az::cast::<_, i32>(Round(0.6)), 1);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27275,"byte_end":27325,"line_start":955,"line_end":955,"column_start":1,"column_end":51}},{"value":"/ // ties rounded to even","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27326,"byte_end":27353,"line_start":956,"line_end":956,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(az::cast::<_, i32>(Round(-0.5)), 0);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27354,"byte_end":27405,"line_start":957,"line_end":957,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(az::cast::<_, i32>(Round(-1.5)), -2);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27406,"byte_end":27458,"line_start":958,"line_end":958,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27459,"byte_end":27466,"line_start":959,"line_end":959,"column_start":1,"column_end":8}},{"value":"repr(transparent)","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27467,"byte_end":27487,"line_start":960,"line_end":960,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":4122},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":27570,"byte_end":27575,"line_start":962,"line_end":962,"column_start":21,"column_end":26},"name":"0","qualname":"::Round::0","value":"T","parent":{"krate":0,"index":4119},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":84,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":28941,"byte_end":28946,"line_start":47,"line_end":47,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":29077,"byte_end":29082,"line_start":53,"line_end":53,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":29214,"byte_end":29219,"line_start":59,"line_end":59,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":11058,"byte_end":11059,"line_start":401,"line_end":401,"column_start":16,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13270,"byte_end":13271,"line_start":478,"line_end":478,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15564,"byte_end":15565,"line_start":554,"line_end":554,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17739,"byte_end":17740,"line_start":630,"line_end":630,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20434,"byte_end":20435,"line_start":714,"line_end":714,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22811,"byte_end":22812,"line_start":797,"line_end":797,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":28941,"byte_end":28946,"line_start":47,"line_end":47,"column_start":30,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4119},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":29077,"byte_end":29082,"line_start":53,"line_end":53,"column_start":32,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4119},"to":{"krate":1,"index":8824}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/float.rs","byte_start":29214,"byte_end":29219,"line_start":59,"line_end":59,"column_start":32,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4119},"to":{"krate":1,"index":8826}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":11058,"byte_end":11059,"line_start":401,"line_end":401,"column_start":16,"column_end":17},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":123},"to":{"krate":0,"index":119}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":13270,"byte_end":13271,"line_start":478,"line_end":478,"column_start":23,"column_end":24},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":126}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":15564,"byte_end":15565,"line_start":554,"line_end":554,"column_start":26,"column_end":27},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":137},"to":{"krate":0,"index":133}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":17739,"byte_end":17740,"line_start":630,"line_end":630,"column_start":24,"column_end":25},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":144},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":20434,"byte_end":20435,"line_start":714,"line_end":714,"column_start":27,"column_end":28},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":151},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/az-1.1.1/src/lib.rs","byte_start":22811,"byte_end":22812,"line_start":797,"line_end":797,"column_start":25,"column_end":26},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":158},"to":{"krate":0,"index":154}}]}
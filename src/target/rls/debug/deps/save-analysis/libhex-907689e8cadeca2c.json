{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0","program":"/home/sh4d0/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hex","/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=907689e8cadeca2c","-C","extra-filename=-907689e8cadeca2c","--out-dir","/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps","-L","dependency=/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/sh4d0/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/sh4d0/Documents/rust_crypto/target/rls/debug/deps/libhex-907689e8cadeca2c.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[5236172449112402078,10892931200874342537]},"crate_root":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src","external_crates":[{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17255007459673538994,10308005785557406899]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1111923456158047016,16902919259693091653]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4206559302939301148,6164973543688958239]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5256837966271238037,14624209252821231605]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7550531950105187004,8150571798412653191]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15335445469838442753,9552689356239597613]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16502730494113453331,739642837530493346]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17056567370692029606,5237526203530126554]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14937216707889756020,8824175777475717960]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17577480307990758245,11665649631686256755]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10532265776820743552,12261914965731844528]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[15918998743166050901,5153345746580364318]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13847123446638245357,191099483651108540]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8535951946701118478,247082403716274271]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8071155208203251459,9749237191716311885]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[10993643928529734294,4550819794165110057]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[3520407426629514955,6784388313453073637]}},{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[947612539730288161,7851933247975044788]}}],"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":411,"byte_end":10701,"line_start":9,"line_end":377,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":411,"byte_end":10701,"line_start":9,"line_end":377,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":43},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":144},{"krate":0,"index":150},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"/ Encoding and decoding hex strings.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":411,"byte_end":449,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":450,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For most cases, you can simply use the `decode()`, `encode()` and","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":454,"byte_end":523,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ `encode_upper()` functions. If you need a bit more control, use the traits","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":524,"byte_end":602,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ `ToHex` and `FromHex` instead.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":603,"byte_end":637,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":638,"byte_end":641,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":642,"byte_end":655,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":656,"byte_end":659,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":660,"byte_end":667,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ extern crate hex;","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":668,"byte_end":689,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":690,"byte_end":693,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":694,"byte_end":709,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/     let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":710,"byte_end":763,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/     println!(\"{}\", hex_string); // Prints '48656c6c6f20776f726c6421'","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":764,"byte_end":836,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ }","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":837,"byte_end":842,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":843,"byte_end":850,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1304,"byte_end":1309,"line_start":45,"line_end":45,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":883,"byte_end":917,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":918,"byte_end":921,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":922,"byte_end":999,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1000,"byte_end":1051,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1052,"byte_end":1055,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1056,"byte_end":1069,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1070,"byte_end":1073,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1074,"byte_end":1081,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1082,"byte_end":1101,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1102,"byte_end":1105,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mut s = String::new();","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1106,"byte_end":1136,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ \"Hello world!\".write_hex(&mut s).unwrap();","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1137,"byte_end":1183,"line_start":40,"line_end":40,"column_start":1,"column_end":47}},{"value":"/ println!(\"{}\", s);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1184,"byte_end":1206,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1207,"byte_end":1214,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1215,"byte_end":1218,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use `encode()`.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1219,"byte_end":1293,"line_start":44,"line_end":44,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1432,"byte_end":1441,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"write_hex","qualname":"::ToHex::write_hex","value":"pub fn write_hex<W: fmt::Write>(&Self, &mut W) -> fmt::Result","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Lower case letters\n are used (e.g. `f9b4ca`).\n","sig":null,"attributes":[{"value":"/ Writes the hex string representing `self` into `w`. Lower case letters","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1316,"byte_end":1390,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ are used (e.g. `f9b4ca`).","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1395,"byte_end":1424,"line_start":47,"line_end":47,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1612,"byte_end":1627,"line_start":52,"line_end":52,"column_start":8,"column_end":23},"name":"write_hex_upper","qualname":"::ToHex::write_hex_upper","value":"pub fn write_hex_upper<W: fmt::Write>(&Self, &mut W) -> fmt::Result","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Upper case letters\n are used (e.g. `F9B4CA`).\n","sig":null,"attributes":[{"value":"/ Writes the hex string representing `self` into `w`. Upper case letters","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1496,"byte_end":1570,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ are used (e.g. `F9B4CA`).","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1575,"byte_end":1604,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"StructVariant","id":{"krate":0,"index":44},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2624,"byte_end":2643,"line_start":85,"line_end":85,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2531,"byte_end":2599,"line_start":83,"line_end":83,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2604,"byte_end":2619,"line_start":84,"line_end":84,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":47},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2791,"byte_end":2800,"line_start":92,"line_end":92,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2697,"byte_end":2768,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2773,"byte_end":2786,"line_start":91,"line_end":91,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2973,"byte_end":2992,"line_start":97,"line_end":97,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2807,"byte_end":2880,"line_start":94,"line_end":94,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2885,"byte_end":2952,"line_start":95,"line_end":95,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2957,"byte_end":2968,"line_start":96,"line_end":96,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":43},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2512,"byte_end":2524,"line_start":82,"line_end":82,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::FromHexError","value":"pub enum FromHexError {\n    InvalidHexCharacter {\n        c: char,\n        index: usize,\n    },\n    OddLength,\n    InvalidStringLength,\n}","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":49}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":2388,"byte_end":2461,"line_start":80,"line_end":80,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4232,"byte_end":4239,"line_start":144,"line_end":144,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3794,"byte_end":3842,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3843,"byte_end":3846,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3847,"byte_end":3913,"line_start":126,"line_end":126,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3914,"byte_end":3917,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3918,"byte_end":3931,"line_start":128,"line_end":128,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3932,"byte_end":3935,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3936,"byte_end":3943,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ use hex::FromHex;","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3944,"byte_end":3965,"line_start":131,"line_end":131,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3966,"byte_end":3969,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ match Vec::from_hex(\"48656c6c6f20776f726c6421\") {","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3970,"byte_end":4023,"line_start":133,"line_end":133,"column_start":1,"column_end":54}},{"value":"/     Ok(vec) => {","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4024,"byte_end":4044,"line_start":134,"line_end":134,"column_start":1,"column_end":21}},{"value":"/         for b in vec {","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4045,"byte_end":4071,"line_start":135,"line_end":135,"column_start":1,"column_end":27}},{"value":"/             println!(\"{}\", b as char);","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4072,"byte_end":4114,"line_start":136,"line_end":136,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4115,"byte_end":4128,"line_start":137,"line_end":137,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4129,"byte_end":4138,"line_start":138,"line_end":138,"column_start":1,"column_end":10}},{"value":"/     Err(e) => {","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4139,"byte_end":4158,"line_start":139,"line_end":139,"column_start":1,"column_end":20}},{"value":"/         // Deal with the error ...","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4159,"byte_end":4197,"line_start":140,"line_end":140,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4198,"byte_end":4207,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4208,"byte_end":4213,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4214,"byte_end":4221,"line_start":143,"line_end":143,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4258,"byte_end":4263,"line_start":145,"line_end":145,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4542,"byte_end":4550,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"pub fn from_hex<T: AsRef<[u8]>>(T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4270,"byte_end":4344,"line_start":147,"line_end":147,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4349,"byte_end":4378,"line_start":148,"line_end":148,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4383,"byte_end":4386,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4391,"byte_end":4458,"line_start":150,"line_end":150,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4463,"byte_end":4534,"line_start":151,"line_end":151,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7263,"byte_end":7269,"line_start":242,"line_end":242,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":6762,"byte_end":6822,"line_start":229,"line_end":229,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":6823,"byte_end":6826,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":6827,"byte_end":6900,"line_start":231,"line_end":231,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":6901,"byte_end":6979,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":6980,"byte_end":7058,"line_start":233,"line_end":233,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7059,"byte_end":7078,"line_start":234,"line_end":234,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7079,"byte_end":7082,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7083,"byte_end":7096,"line_start":236,"line_end":236,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7101,"byte_end":7108,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7109,"byte_end":7181,"line_start":239,"line_end":239,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7182,"byte_end":7247,"line_start":240,"line_end":240,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7248,"byte_end":7255,"line_start":241,"line_end":241,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":39},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7818,"byte_end":7830,"line_start":260,"line_end":260,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"pub fn encode_upper<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7482,"byte_end":7542,"line_start":250,"line_end":250,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7543,"byte_end":7546,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7547,"byte_end":7621,"line_start":252,"line_end":252,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7622,"byte_end":7625,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7626,"byte_end":7639,"line_start":254,"line_end":254,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7640,"byte_end":7643,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7644,"byte_end":7651,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7652,"byte_end":7730,"line_start":257,"line_end":257,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7731,"byte_end":7802,"line_start":258,"line_end":258,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":7803,"byte_end":7810,"line_start":259,"line_end":259,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":41},"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8535,"byte_end":8541,"line_start":283,"line_end":283,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8049,"byte_end":8089,"line_start":268,"line_end":268,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8090,"byte_end":8093,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8094,"byte_end":8173,"line_start":270,"line_end":270,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8174,"byte_end":8253,"line_start":271,"line_end":271,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8254,"byte_end":8257,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8258,"byte_end":8271,"line_start":273,"line_end":273,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8272,"byte_end":8279,"line_start":274,"line_end":274,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8280,"byte_end":8295,"line_start":275,"line_end":275,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8296,"byte_end":8344,"line_start":276,"line_end":276,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8345,"byte_end":8395,"line_start":277,"line_end":277,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8396,"byte_end":8402,"line_start":278,"line_end":278,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8403,"byte_end":8406,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8407,"byte_end":8477,"line_start":280,"line_end":280,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8478,"byte_end":8519,"line_start":281,"line_end":281,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":8520,"byte_end":8527,"line_start":282,"line_end":282,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1712,"byte_end":1713,"line_start":56,"line_end":56,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3019,"byte_end":3031,"line_start":100,"line_end":100,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3348,"byte_end":3360,"line_start":111,"line_end":111,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4975,"byte_end":4978,"line_start":169,"line_end":169,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":1712,"byte_end":1713,"line_start":56,"line_end":56,"column_start":32,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3019,"byte_end":3031,"line_start":100,"line_end":100,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":43},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":3348,"byte_end":3360,"line_start":111,"line_end":111,"column_start":23,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":43},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4241,"byte_end":4246,"line_start":144,"line_end":144,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":26}},{"span":{"file_name":"/home/sh4d0/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.3.0/src/lib.rs","byte_start":4975,"byte_end":4978,"line_start":169,"line_end":169,"column_start":18,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":26}}]}